//============================================================================
// Name        : CudaDB.cpp
// Author      : Sun Peng
// Version     :
// Copyright   : Your copyright notice
// Description : CudaDB in C++, Ansi-style
//============================================================================

#include "main.h"
#include <pthread.h>
#include <unistd.h>
#include <cassert>
#include <zmq.hpp>

cap::mog *DB;

void *worker_routine (void *arg) {
  zmq::context_t *context = (zmq::context_t *) arg;
  zmq::socket_t socket (*context, ZMQ_REP);
  socket.connect ("inproc://workers");
  char* mog_data = (char*)malloc(1024*1024*64);
  int64_t read_len = 0;
  while (true) {
    zmq::message_t request;
    socket.recv (&request);
    // LOG(INFO) << "New Request: " << (char *)request.data() << " " << request.size();
    read_len = DB->read_file((char *)request.data(), mog_data);
    zmq::message_t reply(read_len);
    memcpy((void*)reply.data(), mog_data, read_len);
    socket.send(reply);
  }
  return (NULL);
}

int main(int argc, char**argv) {
  DB = new cap::mog();
  CHECK_EQ(DB->open("SensetimeMog"), MOG_SUCCESS);
  zmq::context_t context(1);
  zmq::socket_t clients (context, ZMQ_ROUTER);
  clients.bind ("ipc:///tmp/SensetimeMog");
  zmq::socket_t workers (context, ZMQ_DEALER);
  workers.bind ("inproc://workers");
  for (int thread_nbr = 0; thread_nbr != 10; thread_nbr++) {
    pthread_t worker;
    pthread_create (&worker, NULL, worker_routine, (void *) &context);
  }
  zmq_proxy(static_cast<void *>(clients), static_cast<void *>(workers), NULL);
  return 0;
}
